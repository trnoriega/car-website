import os
import pickle

import numpy as np

from keras import backend as K
from keras.applications import InceptionV3
from keras.layers import Dense
from keras.models import Sequential
from keras.preprocessing.image import load_img, img_to_array

IMG_WIDTH, IMG_HEIGHT = 299, 299
WEIGHTS_PATH = os.path.join(
    os.path.expanduser('~'), 'Dropbox', 'projects',
    'cars', 'data', 'InceptionV3',
    'InceptionV3_13_10_20.h5'
    )
LOOKUP_PATH = os.path.join(
    os.path.expanduser('~'), 'Dropbox', 'projects',
    'cars', 'data', 'notebooks', '6_predictions_with_trained_model'
    'lookup_dicto.pkl'
    )

def load_model():
    """
    Initializes and loads pretrained weights into keras model to be used for predictions
    """
    conv_base = InceptionV3(
        weights='imagenet',
        include_top=False,
        pooling='avg',
        input_shape=INPUT_SHAPE
    )

    pred_layer_config = {
        'activation': 'softmax',
        'activity_regularizer': None,
        'bias_constraint': None,
        'bias_initializer': {'class_name': 'Zeros', 'config': {}},
        'bias_regularizer': None,
        'kernel_constraint': None,
        'kernel_initializer': {'class_name': 'VarianceScaling',
                               'config': {
                                   'distribution': 'uniform',
                                   'mode': 'fan_avg',
                                   'scale': 1.0,
                                   'seed': 8}
                              },
        'kernel_regularizer': None,
        'name': 'predictions',
        'trainable': True,
        'units': NB_CLASSES,
        'use_bias': True}

    model = Sequential()
    model.add(conv_base)
    model.add(Dense(**pred_layer_config))

    model.load_weights(WEIGHTS_PATH)

    return model

def prepare_image(image_path):
    """
    Converts image found in image_path to a numpy array that
    can be used by keras model to make a prediction
    """
    input_image = load_img(image_path, target_size=(IMG_HEIGHT, IMG_WIDTH))
    input_image = img_to_array(input_image)
    input_image = np.expand_dims(input_image, axis=0)
    return input_image

def load_lookup_dicto():
    """
    returns lookup_dictonary necessary to interpret keras model predictions
    """
    with open(LOOKUP_PATH, 'rb') as f:
        lookup_dicto = pickle.load(f)
    return lookup_dicto

def top3_predictions(model, input_image, lookup_dicto=lookup_dicto):
    """
    returns a ranked list of labels for the top3 predictions of model based on input_image

    Inputs:
    -model generated by load_model
    -input image generated by prepare_image
    -lookup_dicto generated by load_lookup_dicto

    Output:
    ranked list of labels
    """
    prediction = model.predict(input_image)
    top_3 = prediction[0].argsort()[-3:][::-1]
    labels = []
    for idx in top_3:
        labels.append(lookup_dicto.get(idx))
    return labels
