import collections
import os

import numpy as np

from django.shortcuts import render
from django.http import HttpResponse

from keras.preprocessing.image import load_img, img_to_array

from cars.settings import MEDIA_DIR
from .apps import prediction_model, lookup_dicto, graph, FAST_TEST
from .forms import InputImageForm
from .models import Car

### SUPPORT FUNCTIONS FOR INDEX VIEW ###
# Change this to determine the percent confidence you want included as prediction filter
PERCENT_CUTOFF = 95

# Change this to however many results you want to present
NUM_RESULTS = 5

IMG_WIDTH, IMG_HEIGHT = 299, 299

def prepare_image(image_path):
    """
    Converts image found in image_path to a numpy array that
    can be used by keras model to make a prediction
    """
    input_image = load_img(image_path, target_size=(IMG_HEIGHT, IMG_WIDTH))
    input_image = img_to_array(input_image)
    input_image = np.expand_dims(input_image, axis=0)
    input_image = input_image / 255.
    return input_image

def label_to_body(label):
    """
    Returns the body_style of a car associated with the input label
    """
    c = Car.objects.get(label=label)
    body = c.body_style
    return body

def load_predictions(model, image_path, lookup_dicto):
    """
    Inputs:
    -model generated by load_model
    -image path to image to be used for prediction
    -lookup_dicto generated by load_lookup_dicto

    Output:
    ranked list of labels
    """
    input_image = prepare_image(image_path)
    prediction = model.predict(input_image)[0]
    sorted_idxs = np.argsort(prediction)[::-1] #sorted top to bottom

    # make sorted list of labels, probabilities and bodies associated with the prediction
    labels = []
    probs = []
    bodies = []
    for idx in sorted_idxs:
        label = lookup_dicto.get(idx)
        labels.append(label)
        probs.append(prediction[idx])
        bodies.append(label_to_body(label))

    # cycle through the predictions to find the most common bodies
    # within the PERCENT_CUTOFF
    i = 0
    total_prob = 0
    top_bodies = []
    while total_prob < PERCENT_CUTOFF/100:
        top_bodies.append(bodies[i])
        total_prob += probs[i]
        i += 1
    body_count = collections.Counter(top_bodies)
    most_common_bodies = body_count.most_common(2)
    most_common_bodies = [tup[0] for tup in most_common_bodies]

    # select only those labels whose bodies match the most_common_bodies
    consensus_labels = []
    for j, label in enumerate(labels):
        if bodies[j] in most_common_bodies:
            consensus_labels.append(label)

    #truncate results based on NUM_RESULTS
    truncated_consensus = consensus_labels[:NUM_RESULTS]

    return truncated_consensus

###

def index(request):
    form = InputImageForm()
    if request.method == 'POST':
        form = InputImageForm(request.POST, request.FILES)
        # Have we been provided with a valid form?
        if form.is_valid():
            # Save the new category to the database.
            form.save(commit=True)
            image = form.cleaned_data['image']
            image_path = os.path.join(MEDIA_DIR, 'uploads', image._name)

            ###########################
            # PREDICTION HAPPENS HERE #
            ###########################
            if FAST_TEST:
                prediction_labels = [
                    'Acura-Integra_Type_R-2001',
                    'Audi-RS_4_Convertible-2008',
                    'BMW-Z4_Convertible-2012',
                    'Chevrolet-Impala_Sedan-2007',
                    'Dodge-Charger_SRT_8-2009',
                ]
            else:
                with graph.as_default():
                    prediction_labels = load_predictions(prediction_model, image_path, lookup_dicto)

            predictions_dict = {
                'image': image._name,
                'predictions' : [],
            }
            for label in prediction_labels:
                try:
                    c = Car.objects.get(label=label)
                except Exception as e:
                    print(e)
                prediction_items = {}
                prediction_items['path'] = 'predictions/' + label + '_0.jpg'
                prediction_items['make'] = c.make
                prediction_items['model'] = c.model
                prediction_items['year'] = c.year
                prediction_items['body'] = c.body_style
                prediction_items['url'] = c.url
                predictions_dict['predictions'].append(prediction_items)
            request.session['predictions_dict'] = predictions_dict
            return predictions(request)

        else:
            print(form.errors)

    context_dict = {'form': form}
    return render(request, 'classifier/index.html', context=context_dict)

def predictions(request):
    predictions_dict = request.session.get('predictions_dict')
    print(predictions_dict)
    return render(request, 'classifier/predictions.html', context=predictions_dict)

